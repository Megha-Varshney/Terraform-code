-------------------------------------------------KEY-PAIR-------------------------------------------------------------------
provider "aws" {
  region    = "ap-south-1"
}

resource "tls_private_key" "ec2_key" {
  algorithm = "RSA"
  rsa_bits = 4096
}
resource "local_file" "private_key" {
  content = tls_private_key.ec2_key.private_key_pem
  filename = "my_key.pem"
  file_permission = 0400
}
resource "aws_key_pair" "ec2_key" {
  key_name = "my_key"
  public_key = tls_private_key.ec2_key.public_key_openssh
}
--------------------------------------------------------SECURITY-GROUP---------------------------------------------------------------------------
resource "aws_security_group" "security" {
  name        = "security_group"

   ingress {
    description = "http"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  

  ingress {
    description = "ssh"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    name       = "security_group"
  }
}
-----------------------------------------------------------EC2 INSTANCE-----------------------------------------------------------------------
resource "aws_instance" "OS"{
  ami             = "ami-07a8c73a650069cf3"
  instance_type   = "t2.micro"
  key_name        = "my_key"
  security_groups = ["security_group"] 

  connection {
    type     = "ssh"
    user     = "ec2-user"
    private_key = file("C:/Users/New/my_key.pem")
    host     = aws_instance.OS.public_ip
  }

  provisioner "remote-exec" {
    inline = [
      "sudo yum install httpd php git -y",
      "sudo service httpd restart",
    ]
  }

  
  tags = {
    Name = "FinalOS"
  }
}  
output "outaz" {
 value = aws_instance.OS.availability_zone
}
-------------------------------------------------------------EBS VOLUME---------------------------------------------------------------------------
resource "aws_ebs_volume" "example" {
  availability_zone = aws_instance.OS.availability_zone
  size              = 1

  tags = {
    Name = "pd1"
  }
}
------------------------------------------------------------EBS VOLUME ATTACHMENT--------------------------------------------------------------------------
resource "aws_volume_attachment" "ebs" {
  device_name = "/dev/sdd"
  volume_id   = aws_ebs_volume.example.id
  instance_id = aws_instance.OS.id
}


output "os_ip" {
  value = aws_instance.OS.public_ip
}



resource "null_resource" "null1"  {
	provisioner "local-exec" {
	    command = "echo  ${aws_instance.OS.public_ip} > newerfile.txt"
  	}
}

resource "null_resource" "null2"  {

depends_on = [
    aws_volume_attachment.ebs,
  ]


  connection {
    type     = "ssh"
    user     = "ec2-user"
    private_key = file("C:/Users/New/my_key.pem")
    host     = aws_instance.OS.public_ip
  }

  provisioner "remote-exec" {
    inline = [
      "sudo mkfs.ext4  /dev/xvdd",
      "sudo mount  /dev/xvdd  /var/www/html",
      "sudo rm -rf /var/www/html/*",
      "sudo git clone https://github.com/Megha-Varshney/new.git /var/www/html"
    ]
  }
}

-----------------------------------------------------------S3 BUCKET-------------------------------------------------------------------------
resource "aws_s3_bucket" "b" {
  bucket = "bucketnewer"
  acl    = "public-read"

  provisioner "local-exec" {
     command = "git clone https://github.com/Megha-Varshney/mitali.git mitali"
  }

  provisioner "local-exec" {
     when = destroy
     command = "echo Y | rmdir /s mitali"
  }
}

resource "aws_s3_bucket_object" "image-upload" {
  bucket  = aws_s3_bucket.b.bucket
  key     = "1_75jvBleoQfAZJc3sgTSPQA.jpeg"
  acl     =  "public-read"
  source  = "mitali/1_75jvBleoQfAZJc3sgTSPQA.jpeg"
}
------------------------------------------------------CLOUD FRONT--------------------------------------------------------------------------------

variable "var1" {default = "S3-"}
locals {
    s3_origin_id = "${var.var1}${aws_s3_bucket.b.bucket}"
    image_url = "${aws_cloudfront_distribution.s3_distribution.domain_name}/${aws_s3_bucket_object.image-upload.key}"
}
resource "aws_cloudfront_distribution" "s3_distribution" {
    default_cache_behavior {
        allowed_methods  = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
        cached_methods   = ["GET", "HEAD"]
        target_origin_id = local.s3_origin_id
        forwarded_values {
            query_string = false
            cookies {
                forward = "none"
            }
        }
        viewer_protocol_policy = "allow-all"
    }
enabled             = true
origin {
        domain_name = aws_s3_bucket.b.bucket_domain_name
        origin_id   = local.s3_origin_id
    }
restrictions {
        geo_restriction {
        restriction_type = "none"
        }
    }
viewer_certificate {
        cloudfront_default_certificate = true
    }
connection {
        type    = "ssh"
        user    = "ec2-user"
        host    = aws_instance.OS.public_ip
        port    = 22
        private_key = file("C:/Users/New/my_key.pem")
    }
provisioner "remote-exec" {
        inline  = [
            # "sudo su << \"EOF\" \n echo \"<img src='${self.domain_name}'>\" >> /var/www/html/file1  \n \"EOF\""
            "sudo su << EOF",
            "echo \"<img src='http://${self.domain_name}/${aws_s3_bucket_object.image-upload.key}'>\" >> /var/www/html/file1",
            "EOF"
        ]
    }
}



